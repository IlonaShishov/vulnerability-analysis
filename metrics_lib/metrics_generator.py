from ragas.metrics import (
    SemanticSimilarity, 
    LLMContextPrecisionWithoutReference, 
    LLMContextRecall, 
    ResponseRelevancy, 
    Faithfulness, 
    AspectCritic, 
    SummarizationScore
)
from ragas import EvaluationDataset, evaluate
from ragas.run_config import RunConfig
import pandas as pd
import asyncio

from metrics_lib.evaluator_wrappers import wrap_evaluator_embeddings, wrap_evaluator_llm

class MetricsGenerator:

    def __init__(self, test_data, metrics_request):
        self.data = test_data
        self.metrics_table = pd.DataFrame({'ID': list(self.data.keys())})

        self.datasets = metrics_request.get_datasets(self.data)
        self.metrics = [
            metric_class(**kwargs)
            for name, kwargs in metrics_request.metrics.items()
            if (metric_class := globals().get(name.split("_")[0])) is not None
        ]
        
        self.wrapped_evaluator_embeddings = wrap_evaluator_embeddings()
        self.wrapped_evaluator_llm = wrap_evaluator_llm()
        self.run_config = RunConfig()
        # Edit Semaphore value to modify batch size according to available resources
        self.semaphore = asyncio.Semaphore(1)
        
    def _evaluate_dataset(self, case_id, dataset):
        evaluation_dataset = EvaluationDataset.from_list(dataset)
        results = evaluate(
            dataset = evaluation_dataset,
            metrics = self.metrics,
            llm = self.wrapped_evaluator_llm,
            embeddings = self.wrapped_evaluator_embeddings,
            run_config = self.run_config
        )
        scores = results.scores[0]
        self.metrics_table.loc[self.metrics_table['ID'] == case_id, scores.keys()] = scores.values()

    async def _offload_dataset_evaluation(self, case_id, dataset):
        async with self.semaphore:
            await asyncio.to_thread(self._evaluate_dataset, case_id, dataset)
        
    async def evaluate_datasets(self):
        tasks = [
            self._offload_dataset_evaluation(case_id, dataset)
            for case_id, dataset in self.datasets.items()
        ]
        
        if tasks:
            await asyncio.gather(*tasks)
            