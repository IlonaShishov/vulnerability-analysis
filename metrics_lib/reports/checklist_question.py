from jinja2 import Template

from src.cve.utils.prompting import (
    MOD_FEW_SHOT, 
    get_mod_examples, 
    additional_intel_prompting
)

from src.cve.nodes.cve_checklist_node import cve_prompt1

class ChecklistQuestionMetrics:

    def __init__(self):

        self.name = "Checklist Question Metrics"

        self.metrics = {
            "AspectCritic_completeness": { 
                "name": "*aspect_critic_completeness", 
                "definition": "Does the submission cover all necessary security concerns relevant to the given CVE details?"
            },
            "AspectCritic_relevance": { 
                "name": "*aspect_critic_relevance", 
                "definition": "Are all items in the submission directly applicable to the given CVE details?"
            },
            "AspectCritic_actionability": { 
                "name": "*aspect_critic_actionability", 
                "definition": "Are the items in the submission clear, specific, and actionable for a security analyst?"
            },
            "AspectCritic_severity_prioritization": { 
                "name": "*aspect_critic_severity_prioritization", 
                "definition": "Does the submission prioritize the items in a logical order, focusing on the most severe or impactful aspects of the CVE first?"
            },
            "AspectCritic_conciseness": { 
                "name": "*aspect_critic_conciseness", 
                "definition": "Is the submission concise and free from unnecessary redundancy and excessive length?"
            },
            "AspectCritic_faithfulness": { 
                "name": "*aspect_critic_faithfulness", 
                "definition": "Does the submission accurately reflect the provided CVE details without adding unsupported or misleading information?"
            }
        }

        self.prompt_template = Template(cve_prompt1)

    def _flatten_dict(self, data, parent_key='', sep='_'):
        items = []
        for key, value in data.items():
            new_key = f"{parent_key}{sep}{key}" if parent_key else key
            if isinstance(value, dict):
                items.extend(self._flatten_dict(value, new_key, sep=sep).items())
            else:
                items.append((new_key, value))
        return dict(items)

    def get_datasets(self, test_data):
        datasets = {}
        for case_id, case_data in test_data.items():
            dataset = []
            for item in case_data:
                intel, output = item["intel"], item["output"]
                flattened_intel = self._flatten_dict(intel)
                flattened_intel['cve_id'] = intel['vuln_id']
                rendered_intel = self.prompt_template.render(**flattened_intel)
                checklist_ques_lst = [check["input"] for check in output["checklist"]]
                checklist_ques_str = ', '.join(checklist_ques_lst)
                checklist_ques_formated_str = f'[{checklist_ques_str}]'
                data = {
                    "user_input": rendered_intel,
                    "response": checklist_ques_formated_str,
                }
                dataset.append(data)
            datasets[case_id] = dataset
        return datasets