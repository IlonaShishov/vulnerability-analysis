
class ChecklistResponseMetrics:
    
    def __init__(self):

        self.name = "Checklist Response Metrics"

        self.metrics = {
            "AspectCritic_relevance": { 
                "name": "*aspect_critic_relevance", 
                "definition": "Does the response directly and fully address the user input without introducing unrelated or unnecessary information?"
            },
            "AspectCritic_completeness": { 
                "name": "*aspect_critic_completeness",
                "definition": "Does the response provide all necessary information to fully address the user input? Does it avoid missing key details?"
            },
            "AspectCritic_format_compliance": { 
                "name": "*aspect_critic_format_compliance",
                "definition": "Does the response report research findings rather than providing instructions or step-by-step guidance?"
            },
            "AspectCritic_conciseness": { 
                "name": "*aspect_critic_conciseness",
                "definition": "Is the response clear and to the point, avoiding unnecessary repetition or excessive verbosity?"
            },
            "AspectCritic_coherence": { 
                "name": "*aspect_critic_coherence",
                "definition": "Is the response well-structured and logically connected, making it easy to understand and follow?"
            }
        }

    def get_datasets(self, data):
        datasets = {}
        for case_id, outputs in data.items():
            dataset = []
            for output in outputs:    
                for item in output["checklist"]:
                    answer = item["response"]
                    question = item["input"]
                    data = {
                        "user_input": question,
                        "response": answer,
                    }
                    dataset.append(data)
            datasets[case_id] = dataset
        return datasets
