import pandas as pd
from openpyxl import load_workbook
import os

def get_notes(metrics={}):
    return [
        f"{metric['name']} - {metric['definition']}"
        for metric in metrics.values()
        if "name" in metric and "definition" in metric
    ]

def print_notes_to_console(metrics={}):
    notes = get_notes(metrics)
        
    if notes:        
        print("\nPlease note the prompts for the following metrics:")
        print("\n".join(notes))

def print_to_console(df, metrics={}):
    print(df)
    print_notes_to_console(metrics)

def save_notes_to_excel(file_path, sheet_name, metrics={}):
    notes = get_notes(metrics)

    if notes:
        wb = load_workbook(file_path)
        if sheet_name in wb.sheetnames:
            ws = wb[sheet_name]
            # Find the next empty row after the table
            next_row = ws.max_row + 3
            ws.cell(row=next_row, column=1, value="Please note the prompts for the following metrics:")   
            for i, line in enumerate(notes):
                ws.cell(row=next_row + 1 + i, column=1, value=line)        
            wb.save(file_path)

def save_to_excel(df, file_path, sheet_name='Sheet1', index=False, metrics={}):
    try:
        if os.path.exists(file_path):
            with pd.ExcelWriter(file_path, mode='a') as writer:
                df.to_excel(writer, sheet_name=sheet_name, index=index)
                print(f"DataFrame successfully saved to a new sheet: {sheet_name}")
        else:
            df.to_excel(file_path, sheet_name=sheet_name, index=index)
            print(f"File created and DataFrame saved to sheet: {sheet_name}")

        save_notes_to_excel(file_path, sheet_name, metrics)

    except Exception as e:
        print(f"An error occurred: {e}")