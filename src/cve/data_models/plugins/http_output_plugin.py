# SPDX-FileCopyrightText: Copyright (c) 2024 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
# SPDX-License-Identifier: LicenseRef-NvidiaProprietary
#
# NVIDIA CORPORATION, its affiliates and licensors retain all intellectual
# property and proprietary rights in and to this material, related
# documentation and any modifications thereto. Any use, reproduction,
# disclosure or distribution of this material and related documentation
# without an express license agreement from NVIDIA CORPORATION or
# its affiliates is strictly prohibited.

import logging
from pydantic import BaseModel
import requests

from morpheus.config import Config
from morpheus.pipeline.linear_pipeline import LinearPipeline
from morpheus.pipeline.stage_decorator import stage

from ...data_models.config import RunConfig
from ...data_models.output import AgentMorpheusOutput
from ..plugin import OutputPluginSchema

logger = logging.getLogger(__name__)


class HttpOutputPluginConfig(BaseModel):

    callback_url: str


class HttpOutputPlugin(OutputPluginSchema):
    """
    OutputPlugin that sends and HTTP Post with the current output message 
    as an application/json to a callback URL defined in the configuration.

    Usage:

      "output": {
        "_type": "plugin",
        "plugin_name": "agent_morpheus.cve.data_models.plugins.http_output_plugin.HttpOutputPlugin",
        "plugin_config": {
          "callback_url": "http://agent-morpheus-client:8080/reports"
        }
      }
    """

    def build_output(self, pipe: LinearPipeline, config: Config, run_config: RunConfig):

        http_config = HttpOutputPluginConfig(**run_config.output.plugin_config)
        if not http_config.callback_url:
            raise ValueError(
                "No callback URL provided in HTTP Output plugin config")

        @stage
        def http_callback_stage(message: AgentMorpheusOutput) -> AgentMorpheusOutput:
            headers = {'Content-type': 'application/json'}
            model_json = message.model_dump_json(by_alias=True)
            try:
                response = requests.post(
                    http_config.callback_url, data=model_json.encode('utf-8'), headers=headers)
                response.raise_for_status()
            except requests.exceptions.RequestException as e:
                logger.error(
                    f"Error sending output to {http_config.callback_url}: {e}")
            if not response.ok:
                logger.error(
                    f'Unable to send output response to {http_config.callback_url}. Error: {response.status_code} - {response.reason}')
            else:
                logger.info(
                    f'Successfully sent output to {http_config.callback_url}')
            # Make stage a pass-through
            return message

        pipe.add_stage(http_callback_stage(config))
