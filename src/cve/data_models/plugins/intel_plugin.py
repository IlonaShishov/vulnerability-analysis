# SPDX-FileCopyrightText: Copyright (c) 2024 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
# SPDX-License-Identifier: LicenseRef-NvidiaProprietary
#
# NVIDIA CORPORATION, its affiliates and licensors retain all intellectual
# property and proprietary rights in and to this material, related
# documentation and any modifications thereto. Any use, reproduction,
# disclosure or distribution of this material and related documentation
# without an express license agreement from NVIDIA CORPORATION or
# its affiliates is strictly prohibited.

import logging
from pydantic import BaseModel
import requests
from ..plugin import IntelPluginSchema
from ..cve_intel import IntelPluginData

logger = logging.getLogger(__name__)


class SimpleHttpIntelPluginConfig(BaseModel):
    source: str
    endpoint: str
    api_key: str | None = None


class SimpleHttpIntelPlugin(IntelPluginSchema):
    """
    This is a simple Http intel retriever that sends an http GET to the configured
    endpoint and returns the text content as a result.
    The configuration expects an endpoint with the `{vuln_id}` template parameter
    that will be replaced by the current vuln_id. e.g. https://example.com/{vuln_id}/details
    Additionally if the `api_key` is provided, it will be sent as an HTTP Authorization Header
    with value: Bearer <api_key>
    """

    def __init__(self, session, config):
        self._session = session
        self._config = SimpleHttpIntelPluginConfig(**config)

    async def retrieve(self, vuln_id: str) -> IntelPluginData:
        endpoint = self._config.endpoint.format(vuln_id=vuln_id)
        try:
            headers = {'Accept': 'text/plain'}
            if self._config.api_key:
                headers['Authorization'] = f'Bearer {self._config.api_key}'
            response = requests.get(endpoint, headers=headers)
            response.raise_for_status()
            if not response.ok:
                logger.error(
                    f'Unable to request intel data from {endpoint}. Error: {response.status_code} - {response.reason}')
            else:
                logger.debug(
                    f'Successfully requested intel data to: {endpoint}')
            return IntelPluginData(label=self._config.source, description=response.text)
        except requests.exceptions.RequestException as e:
            logger.error(f"Error fetching intel data from {endpoint}: {e}")
            return IntelPluginData(label=self._config.source, description='No data available for this intel source')