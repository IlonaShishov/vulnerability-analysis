# SPDX-FileCopyrightText: Copyright (c) 2024, NVIDIA CORPORATION & AFFILIATES. All rights reserved.
# SPDX-License-Identifier: Apache-2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from pathlib import PurePath
import shutil
import tempfile

import pytest

from ..source_code_git_loader import SourceCodeGitLoader
from ...data_models.input import ArtifactSourceInfo, GitSourceInfo
from ..source_code_artifact_loader import SourceCodeArtifactLoader


test_artifact_data = [
    ({
        "type": "artifact",
        "source_type": "code",
        "path": "https://github.com/openshift/cluster-resource-override-admission-operator/archive/41e0b0161c9f2a08ebfbacbb9a712a5746b971df.zip",
        "compress": "zip",
        "include": [
          "**/*.go",
          "go.*",
          "**/*.py",
          "requirements.txt",
          "Pipfile",
          "Pipfile.lock",
          "pyproject.toml",
          "setup.py",
          "setup.cfg",
          "Dockerfile*",
          "docker-compose.yml",
          "*.dockerfile",
          "*.dockerignore",
          "docker-compose.*.yml",
          "*.sh",
          "scripts/**/*",
          "*.env",
          "*.yaml",
          "*.yml",
          "*.json",
          "config/**/*",
          "conf.d/**/*"
        ],
        "exclude": [
          "test/**/*",
          "vendor/**/*",
          "tests/**/*",
          "test/**/*",
          "venv/**/*",
          ".venv/**/*",
          "env/**/*",
          "build/**/*",
          "dist/**/*",
          ".mypy_cache/**/*",
          ".pytest_cache/**/*",
          "__pycache__/**/*",
          "*.pyc",
          "*.pyo",
          "*.pyd",
          ".github/**/*"
        ]
      }, 156),
    ({
        "type": "artifact",
        "source_type": "doc",
        "path": "https://github.com/openshift/cluster-resource-override-admission-operator/archive/41e0b0161c9f2a08ebfbacbb9a712a5746b971df.zip",
        "compress": "zip",
        "include": [
          "**/*.md",
          "docs/**/*.rst"
        ],
        "exclude": []
      }, 119)
]

@pytest.mark.parametrize("data, expected", test_artifact_data)
def test_artifact_loader(data, expected):

    source_info = ArtifactSourceInfo(**data)
    tmp_path = tempfile.mkdtemp()
    path = tmp_path / PurePath(source_info.path)

    blob_loader = SourceCodeArtifactLoader(local_path=path,
                                          remote_path=source_info.path,
                                          compression=source_info.compression,
                                          include=source_info.include,
                                          exclude=source_info.exclude)
    try:
        blobs = blob_loader.yield_blobs()

        count = 0
        for _ in blobs:
            count = count + 1
        
        assert count == expected
    finally:
        shutil.rmtree(tmp_path)

test_git_data = [
    ({
        "_type": "git",
        "source_type": "code",
        "git_repo": "https://github.com/openshift/telemeter",
        "ref": "14489f7dc656175e11a3ef962fcbcd113b3651a9",
        "include": [
            "**/*.go",
            "go.*"
        ],
        "exclude": [
            "test/**/*",
            "vendor/**/*"
        ]
    }, 121),
    ({
        "_type": "git",
        "source_type": "code",
        "git_repo": "https://github.com/openshift/telemeter",
        "ref": "14489f7dc656175e11a3ef962fcbcd113b3651a9",
        "include": [
            "docs/**/*.md"
        ],
        "exclude": [ ]
    }, 7)
]


@pytest.mark.parametrize("data, expected", test_git_data)
def test_git_loader(data, expected):

    source_info = GitSourceInfo(**data)
    tmp_path = tempfile.mkdtemp()
    path = tmp_path / PurePath(source_info.git_repo)

    blob_loader = SourceCodeGitLoader(repo_path=path,
                                          clone_url=source_info.git_repo,
                                          ref=source_info.ref,
                                          include=source_info.include,
                                          exclude=source_info.exclude)
    try:
        blobs = blob_loader.yield_blobs()

        count = 0
        for _ in blobs:
            count = count + 1
        
        assert count == expected
    finally:
        shutil.rmtree(tmp_path)

