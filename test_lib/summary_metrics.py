
from ragas.dataset_schema import SingleTurnSample

class SummaryMetrics:
 
    def __init__(self):

        self.metrics = {
            "blue_score": {
                "scorer_class": "BleuScore",
                "name": "bleu_score",
                "sample_type": "single_turn_samples",
            },
            "rouge_score": {
                "scorer_class": "RougeScore",
                "name": "rouge_score",
                "sample_type": "single_turn_samples"
            },
            "semantic_similarity": {
                "scorer_class": "SemanticSimilarity",
                "name": "semantic_similarity",
                "sample_type": "single_turn_samples",
                "embeddings": True,
            },
            "context_precision": {
                "scorer_class": "LLMContextPrecisionWithoutReference",
                "name": "context_precision",
                "sample_type": "single_turn_samples",
                "llm": True,
            },
            "context_recall": {
                "scorer_class": "LLMContextRecall",
                "name": "context_recall",
                "sample_type": "single_turn_samples",
                "llm": True,
            },
            "noise_sensitivity": {
                "scorer_class": "NoiseSensitivity",
                "name": "noise_sensitivity",
                "sample_type": "single_turn_samples",
                "llm": True,
            },
            "faithfulness": {
                "scorer_class": "Faithfulness",
                "name": "faithfulness",
                "sample_type": "single_turn_samples",
                "llm": True,
            },
            "response_relevancy": {
                "scorer_class": "ResponseRelevancy",
                "name": "response_relevancy",
                "sample_type": "single_turn_samples",
                "embeddings": True,
                "llm": True,
            }
        }

    def get_single_turn_samples(self, data):
        single_turn_samples = {}
        for case_id, outputs in data.items():
            samples = []
            for output in outputs:    
                checklist = [item["response"] for item in output["checklist"]]
                sample = SingleTurnSample(
                    user_input="Given the checklist as context and the summary as a reference, how accurately does the summary provided in the response reflect the checklist data?",
                    response=output["summary"],
                    reference=' '.join(checklist),
                    retrieved_contexts=checklist,
                )
                samples.append(sample)
            single_turn_samples[case_id] = samples
        return single_turn_samples